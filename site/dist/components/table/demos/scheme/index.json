{
    "setting": {
        "title": "定义表头信息",
        "order": 1
    },
    "catalogs": [],
    "contents": "<p>第一种定义形式（传值）：<code>scheme</code>：定义表头信息，类型<code>Object</code>，默认<code>{}</code></p>\n<ul>\n<li><strong> <code>{key: value}</code> 说明：</strong></li>\n</ul>\n<div class=\"k-table-wrapper k-border\">\n                    <table class=\"k-table\">\n                        <thead><tr>\n<th>形式</th>\n<th>描述</th>\n</tr>\n</thead>\n                        <tbody><tr>\n<td>key-{String}</td>\n<td>根据每一行的<code>item</code>，获取<code>key</code>属性；若<code>key</code>为一个连续获取的字符（即：<code>item.c.c1</code>）会逐级获取，若没获取到，则为<code>undefined</code>。</td>\n</tr>\n<tr>\n<td>key-{Object}</td>\n<td><code>key</code>只作为这个表头的<code>ID</code>，实际获取的值为<code>{Object}</code>内<code>template</code>的返回值。<code>{Object}</code>内的<code>title</code>为要展示的表头信息，<code>template</code>方法返回这列要展示的数据（参数接收：每一行的<code>item</code>）。</td>\n</tr>\n</tbody>\n                    </table>\n                </div><ul>\n<li>PS：<code>template</code>可以返回一个具体的值，也可以返回一个虚拟DOM。</li>\n</ul>\n<hr>\n<p>另一种定义形式（标签）：<code>&lt;TableColumn&gt;&lt;/TableColumn&gt;</code></p>\n<ul>\n<li><strong> <code>&lt;TableColumn /&gt;</code>属性描述：</strong></li>\n</ul>\n<div class=\"k-table-wrapper k-border\">\n                    <table class=\"k-table\">\n                        <thead><tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n                        <tbody><tr>\n<td>title</td>\n<td>表头信息</td>\n<td><code>String</code></td>\n<td><code>[]</code></td>\n</tr>\n<tr>\n<td>template</td>\n<td>当前列的返回数据（遵守<code>{key-value}</code>形式中的规则）</td>\n<td><code>Function</code></td>\n<td><code>(data, index) { }</code></td>\n</tr>\n<tr>\n<td>key</td>\n<td>行的key值（遵守<code>{key-value}</code>形式中的规则）</td>\n<td><code>String</code></td>\n<td><code>&quot;&quot;</code></td>\n</tr>\n<tr>\n<td>width</td>\n<td>列宽</td>\n<td><code>Number</code></td>\n<td><code>undefined</code></td>\n</tr>\n</tbody>\n                    </table>\n                </div>",
    "codes": [
        {
            "language": "vdt",
            "content": "import Table, {TableColumn} from 'kpc/components/table';\nvar data = [{a: '虚拟DOM', b: '获取到了item.b', c: {c1: 'item.c.c1'}, e: '值形式'}];\nvar scheme = {\n    a: {\n        title: 'a只是个id',\n        template: function(item) {\n           return <a>{{item.a}}</a>\n        }\n    },\n    b: 'key-{String}形式',\n    'c.c1': 'key为一个连续获取的字符串',\n    'd.d1': '没有这个key',\n    e: {\n        title: 'e也只是个id',\n        template: function(item) {\n           return item.e;\n        }\n    },\n};\n\n\n<div>\n    <p>{key: value}形式:</p>\n    <Table scheme={{scheme}} data={{data}} />\n    <p>标签形式:</p>\n    <Table data={{data}}>\n      <TableColumn title='a' template={{ function(item) {\n         return <a>{{item.a}}</a>\n      } }} key=''></TableColumn>\n      <TableColumn title='key为一个连续获取的字符' key='c.c1'></TableColumn>\n      <TableColumn title='key为一个连续获取的字符' key='e'>\n          <div>不生效</div>\n      </TableColumn>\n      <TableColumn title='这个宽度大一点400px' key='b' width='400'/>\n    </Table>\n</div>"
        },
        {
            "language": "js",
            "content": "import Intact from 'intact';\nimport template from './index.vdt';\n\nexport default class extends Intact {\n    @Intact.template()\n    static template = template;\n}"
        }
    ],
    "index": 33,
    "highlighted": [
        {
            "language": "vdt",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> Table, {TableColumn} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/table'</span>;\n<span class=\"hljs-keyword\">var</span> data = [{<span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">'虚拟DOM'</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">'获取到了item.b'</span>, <span class=\"hljs-attr\">c</span>: {<span class=\"hljs-attr\">c1</span>: <span class=\"hljs-string\">'item.c.c1'</span>}, <span class=\"hljs-attr\">e</span>: <span class=\"hljs-string\">'值形式'</span>}];\n<span class=\"hljs-keyword\">var</span> scheme = {\n    <span class=\"hljs-attr\">a</span>: {\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'a只是个id'</span>,\n        <span class=\"hljs-attr\">template</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item</span>) </span>{\n           <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span>&gt;</span>{{item.a}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span>\n        }\n    },\n    <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">'key-{String}形式'</span>,\n    <span class=\"hljs-string\">'c.c1'</span>: <span class=\"hljs-string\">'key为一个连续获取的字符串'</span>,\n    <span class=\"hljs-string\">'d.d1'</span>: <span class=\"hljs-string\">'没有这个key'</span>,\n    <span class=\"hljs-attr\">e</span>: {\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'e也只是个id'</span>,\n        <span class=\"hljs-attr\">template</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item</span>) </span>{\n           <span class=\"hljs-keyword\">return</span> item.e;\n        }\n    },\n};\n\n\n&lt;div&gt;\n    &lt;p&gt;{key: value}形式:&lt;/p&gt;\n    &lt;Table scheme={{scheme}} data={{data}} /&gt;\n    &lt;p&gt;标签形式:&lt;/p&gt;\n    &lt;Table data={{data}}&gt;\n      &lt;TableColumn title='a' template={{ function(item) {\n         return &lt;a&gt;{{item.a}}&lt;/a&gt;\n      } }} key=''&gt;&lt;/TableColumn&gt;\n      &lt;TableColumn title='key为一个连续获取的字符' key='c.c1'&gt;&lt;/TableColumn&gt;\n      &lt;TableColumn title='key为一个连续获取的字符' key='e'&gt;\n          &lt;div&gt;不生效&lt;/div&gt;\n      &lt;/TableColumn&gt;\n      &lt;TableColumn title='这个宽度大一点400px' key='b' width='400'/&gt;\n    &lt;/Table&gt;\n&lt;/div&gt;</code></pre>"
        },
        {
            "language": "js",
            "content": "<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Intact <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'intact'</span>;\n<span class=\"hljs-keyword\">import</span> template <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./index.vdt'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Intact</span> </span>{\n    @Intact.template()\n    <span class=\"hljs-keyword\">static</span> template = template;\n}</code></pre>"
        }
    ]
}
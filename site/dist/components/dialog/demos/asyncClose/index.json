{
    "setting": {
        "title": "异步关闭",
        "order": 6
    },
    "catalogs": [],
    "contents": "<p><code>Dialog</code>默认点击确定按钮会立即关闭弹窗并触发<code>ok</code>事件，我们可以给<code>ok</code>属性（并非<code>ok</code>事件）指定一个函数来去掉默认函数行为，此时你可以自己控制弹窗的关闭情况。<code>cancel</code>属性同理。</p>\n",
    "codes": [
        {
            "language": "vdt",
            "content": "import Dialog from 'kpc/components/dialog';\nimport {Form, FormItem} from 'kpc/components/form';\nimport {Input} from 'kpc/components/input';\nimport {Button} from 'kpc/components/button';\n\n<div>\n    <Button type=\"primary\"\n        ev-click={{ self.set.bind(self, 'show', true) }}\n    >Close Dialog Asynchronously</Button>\n    <Dialog v-model=\"show\" title=\"Customized ok callback\"\n        ok={{ self.ok }}\n    >\n        <Form ref=\"form\">\n            <FormItem model=\"code\" rules={{ {required: true, digits: true} }} label=\"Code:\">\n                <Input placeholder=\"please enter digits\" v-model=\"code\" />\n            </FormItem>\n        </Form>\n    </Dialog>\n</div>"
        },
        {
            "language": "js",
            "content": "import Intact from 'intact';\nimport template from './index.vdt';\n\nimport Message from 'kpc/components/message';\n\nexport default class extends Intact {\n    @Intact.template()\n    static template = template;\n\n    async ok(dialog) {\n        // validate the form firstly\n        if (await this.refs.form.validate()) {\n            // make the ok button show loading\n            dialog.showLoading(); \n            // mock api\n            new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    if (Math.random() > 0.5) {\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }, 2000);\n            }).then(() => {\n                // if success, close dialog \n                dialog.hideLoading();\n                dialog.close();\n            }, () => {\n                // if error, don't close dialog\n                dialog.hideLoading();\n                Message.error('error occured');\n            });\n        }\n    }\n}"
        }
    ],
    "index": 106,
    "highlighted": [
        {
            "language": "vdt",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> Dialog <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/dialog'</span>;\n<span class=\"hljs-keyword\">import</span> {Form, FormItem} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/form'</span>;\n<span class=\"hljs-keyword\">import</span> {Input} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/input'</span>;\n<span class=\"hljs-keyword\">import</span> {Button} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/button'</span>;\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"primary\"</span>\n        <span class=\"hljs-attr\">ev-click</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">self.set.bind</span>(<span class=\"hljs-attr\">self</span>, '<span class=\"hljs-attr\">show</span>', <span class=\"hljs-attr\">true</span>) }}\n    &gt;</span>Close Dialog Asynchronously<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Dialog</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"show\"</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">\"Customized ok callback\"</span>\n        <span class=\"hljs-attr\">ok</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">self.ok</span> }}\n    &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Form</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"form\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormItem</span> <span class=\"hljs-attr\">model</span>=<span class=\"hljs-string\">\"code\"</span> <span class=\"hljs-attr\">rules</span>=<span class=\"hljs-string\">{{</span> {<span class=\"hljs-attr\">required:</span> <span class=\"hljs-attr\">true</span>, <span class=\"hljs-attr\">digits:</span> <span class=\"hljs-attr\">true</span>} }} <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"Code:\"</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"please enter digits\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"code\"</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormItem</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Form</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Dialog</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></code></pre>"
        },
        {
            "language": "js",
            "content": "<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Intact <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'intact'</span>;\n<span class=\"hljs-keyword\">import</span> template <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./index.vdt'</span>;\n\n<span class=\"hljs-keyword\">import</span> Message <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/message'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Intact</span> </span>{\n    @Intact.template()\n    <span class=\"hljs-keyword\">static</span> template = template;\n\n    <span class=\"hljs-keyword\">async</span> ok(dialog) {\n        <span class=\"hljs-comment\">// validate the form firstly</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.refs.form.validate()) {\n            <span class=\"hljs-comment\">// make the ok button show loading</span>\n            dialog.showLoading(); \n            <span class=\"hljs-comment\">// mock api</span>\n            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n                setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n                    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Math</span>.random() &gt; <span class=\"hljs-number\">0.5</span>) {\n                        resolve();\n                    } <span class=\"hljs-keyword\">else</span> {\n                        reject();\n                    }\n                }, <span class=\"hljs-number\">2000</span>);\n            }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n                <span class=\"hljs-comment\">// if success, close dialog </span>\n                dialog.hideLoading();\n                dialog.close();\n            }, () =&gt; {\n                <span class=\"hljs-comment\">// if error, don't close dialog</span>\n                dialog.hideLoading();\n                Message.error(<span class=\"hljs-string\">'error occured'</span>);\n            });\n        }\n    }\n}</code></pre>"
        }
    ]
}
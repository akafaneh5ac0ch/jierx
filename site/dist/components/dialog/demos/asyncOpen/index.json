{
    "setting": {
        "title": "异步打开",
        "order": 5
    },
    "catalogs": [],
    "contents": "<p>当弹窗很复杂时，我们可以通过继承<code>Dialog</code>的方式，将所有业务逻辑封装成一个新弹窗组件。经常地，我们需要在弹窗打开时获取数据，一种方式是，弹窗同步打开，然后使用loading动画来过渡数据加载过程，另一种方式，我们还可以在弹窗数据加载完成后再打开弹窗。这种方式只需要在继承的弹窗的<code>_init</code>生命周期函数中返回<code>Promise</code>对象即可。另外我们还可以通过<code>open</code>, <code>close</code>来处理打开关闭后的逻辑。</p>\n",
    "codes": [
        {
            "language": "vdt",
            "content": "<t:parent>\n    <b:body>\n        Hello {{ self.get('name') }}\n    </b:body>\n</t:parent>",
            "file": "dialog.vdt"
        },
        {
            "language": "js",
            "content": "import Dialog from 'kpc/components/dialog';\nimport template from './dialog.vdt';\n\nexport default class extends Dialog {\n    @Intact.template()\n    static template = template;\n\n    defaults() {\n        return {\n            ...super.defaults(),\n            title: 'Async Open Dialog'\n        };\n    }\n\n    _init() {\n        // call super method firstly\n        super._init();\n\n        // return a promise\n        return new Promise((resolve, reject) => {\n            // mock api\n            setTimeout(() => {\n                resolve({name: 'KPC'});\n            }, 2000);\n        }).then(data => {\n            this.set('name', data.name);\n        });\n    }\n}",
            "file": "dialog.js"
        },
        {
            "language": "vdt",
            "content": "import Button from 'kpc/components/button';\n\n<Button type=\"primary\" ev-click={{ self.showDialog }}>Show Dialog Asynchronously</Button>"
        },
        {
            "language": "js",
            "content": "import Intact from 'intact';\nimport template from './index.vdt';\n\nimport Dialog from './dialog';\nimport Message from 'kpc/components/message';\n\nexport default class extends Intact {\n    @Intact.template()\n    static template = template;\n\n    showDialog(e) {\n        // button show loading\n        e.component.showLoading();\n\n        const dialog = new Dialog();\n\n        dialog.show();\n        dialog.on('ok', (data) => {\n            Message.info(`You clicked ok.`);\n        });\n\n        // button hide loading\n        dialog.on('open', () => e.component.hideLoading());\n\n        // for unit test\n        this.dialog = dialog;\n    }\n}"
        }
    ],
    "index": 95,
    "highlighted": [
        {
            "language": "vdt",
            "content": "<pre><code class=\"hljs jsx\">&lt;t:parent&gt;\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">b:body</span>&gt;</span>\n        Hello {{ self.get('name') }}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">b:body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">t:parent</span>&gt;</span></span></code></pre>",
            "file": "dialog.vdt"
        },
        {
            "language": "js",
            "content": "<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Dialog <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/dialog'</span>;\n<span class=\"hljs-keyword\">import</span> template <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./dialog.vdt'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Dialog</span> </span>{\n    @Intact.template()\n    <span class=\"hljs-keyword\">static</span> template = template;\n\n    defaults() {\n        <span class=\"hljs-keyword\">return</span> {\n            ...super.defaults(),\n            <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Async Open Dialog'</span>\n        };\n    }\n\n    _init() {\n        <span class=\"hljs-comment\">// call super method firstly</span>\n        <span class=\"hljs-keyword\">super</span>._init();\n\n        <span class=\"hljs-comment\">// return a promise</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n            <span class=\"hljs-comment\">// mock api</span>\n            setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n                resolve({<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'KPC'</span>});\n            }, <span class=\"hljs-number\">2000</span>);\n        }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n            <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">'name'</span>, data.name);\n        });\n    }\n}</code></pre>",
            "file": "dialog.js"
        },
        {
            "language": "vdt",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> Button <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/button'</span>;\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"primary\"</span> <span class=\"hljs-attr\">ev-click</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">self.showDialog</span> }}&gt;</span>Show Dialog Asynchronously<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span></code></pre>"
        },
        {
            "language": "js",
            "content": "<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Intact <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'intact'</span>;\n<span class=\"hljs-keyword\">import</span> template <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./index.vdt'</span>;\n\n<span class=\"hljs-keyword\">import</span> Dialog <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./dialog'</span>;\n<span class=\"hljs-keyword\">import</span> Message <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/message'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Intact</span> </span>{\n    @Intact.template()\n    <span class=\"hljs-keyword\">static</span> template = template;\n\n    showDialog(e) {\n        <span class=\"hljs-comment\">// button show loading</span>\n        e.component.showLoading();\n\n        <span class=\"hljs-keyword\">const</span> dialog = <span class=\"hljs-keyword\">new</span> Dialog();\n\n        dialog.show();\n        dialog.on(<span class=\"hljs-string\">'ok'</span>, (data) =&gt; {\n            Message.info(<span class=\"hljs-string\">`You clicked ok.`</span>);\n        });\n\n        <span class=\"hljs-comment\">// button hide loading</span>\n        dialog.on(<span class=\"hljs-string\">'open'</span>, () =&gt; e.component.hideLoading());\n\n        <span class=\"hljs-comment\">// for unit test</span>\n        <span class=\"hljs-keyword\">this</span>.dialog = dialog;\n    }\n}</code></pre>"
        }
    ]
}
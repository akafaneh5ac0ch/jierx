import Button from 'components/button';
import Link from 'components/link';
import Badge from 'components/badge';

const Article = self.get('Article');

let currentNav = {};

function Catalog(props) {
    return <div class="catalog-section">
        <h5 v-if={{ props.key !== undefined }}>{{ props.key }}</h5>
        <ul>
            <li v-for={{ props.value }} class={{ {
                active: value.path.includes(self.path.slice(1)) 
            } }}>
                {{ (() => {
                    if (value.path.includes(self.path.slice(1))) {
                        currentNav = value;
                    }
                })() }}
                <Link href={{ `${process.URL_PREFIX}/${value.path.replace('.md', '/').replace('index/', '')}` }}>
                    {{ do {
                        const matches = value.path.match(/components\/([^\/]+)/);
                        if (matches) {
                            const name = matches[1];
                            [
                                name[0].toUpperCase() + name.substring(1),
                                <span>{{ value.title }}</span>
                            ];
                        } else {
                            if (value.title === '更新日志') {
                                <Badge disabled={{ !!self.get('hasRead') }}>{{ value.title }}</Badge>
                            } else {
                                value.title;
                            }
                        }
                    } }}
                </Link>
            </li>
        </ul>
    </div>
}

const sidebar = Article.sidebar;
const _sidebar = [];
if (sidebar) {
    if (sidebar.undefined) {
        _sidebar.push({
            key: undefined,
            value: sidebar.undefined
        });
    }
    for (let key in sidebar) {
        if (key !== 'undefined') {
            _sidebar.push({
                key,
                value: key !== '组件' ? 
                    sidebar[key] :
                    sidebar[key].sort((a, b) => {
                        return a.path > b.path ? 1 : -1;
                    })
            });
        }
    }
}

<t:parent navIndex="document" class="document-page fixed-aside" {{ ...scope }}>
    <b:content>
        <aside>
            <div class="aside-wrapper">
                <Catalog key={{ value.key }} value={{ value.value }} v-for={{ _sidebar }} />
                <div class="aside-border transition"></div>
            </div>
        </aside>
        <article>
            <div class="article-head">
                <div class="title">{{ currentNav.title }}</div>
                <div class="edit-link">
                    如果你发现文档有问题，请帮忙在
                    <a target="_blank" 
                        href={{ `https://github.com/ksc-fe/kpc/blob/master/${currentNav.path}` }}
                    >github</a>
                    上修正该文档
                </div>
            </div>
            <Article ref="article" />
        </article>
        <div class="table-of-contents" v-if={{ self.get('demos') }}
            ref="tableContents"
        >
            <ul>
                <li v-for={{ self.get('demos') }}
                    class={{ {
                        "c-ellipsis": true, 
                        'active': self.get('activeExample') == value.data.index
                    } }}
                    ev-click={{ self._scrollToView.bind(self, value) }}
                >
                    {{ value.data.setting.title }}
                </li>
            </ul>
            <div class="aside-border transition" style={{ self.get('borderStyle') }}></div>
        </div>
    </b:content>
</t:parent>

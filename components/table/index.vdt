const Checkbox = require('../checkbox');

const {checkType, scheme, checkedKeys, data, rowKey} = self.get();

const thead = <thead>
    <tr>
        <th v-if={{ checkType === 'checkbox' }} class="k-th-checkbox">
            <Checkbox value={{ checkedKeys.length === data.length }}
                ev-$change:value={{ self.toggleCheckAll.bind(self) }}
            />
        </th>
        <th v-else-if={{ checkType === 'radio' }} class="k-th-radio"></th>
        {{ __u.map(scheme, (item) => {
            if (!__u.isObject(item)) {
                item = {title: item};
            }

            return <th width={{ item.width }}
                title={{ item.title }}
                class={{ {'k-sortable': item.sortable} }}
            >
                <div v-if={{ !item.groups }}>{{ item.title }}</div>
            </th>
        }) }}
    </tr>
</thead>

const tbody = <tbody>
    {{ __u.map(data, (value, index) => {
        const key = rowKey.call(self, value, index);
        return <tr key={{ key }}
            ev-click={{ self._rowCheck.bind(self, value, index) }}
        >
            <td v-if={{ checkType === 'checkbox' }}>
                <Checkbox v-model="checkedKeys" name="k-table-checkbox"
                    trueValue={{ key }}
                />
            </td>
            <td v-else-if={{ checkType === 'radio' }}>
                <input type="radio" />
            </td>
            {{ __u.map(scheme, (item, key) => {
                let td;
                if (__u.isObject(item) && item.template) {
                    if (typeof item.template === 'function') {
                        td = item.template.call(self, value, index);
                    } else {
                        td = item.template;
                    }
                } else if (value[key] !== undefined) {
                    td = value[key];
                } else {
                    let obj = item,
                        keys = key.spilt('.'),
                        i = 0;
                    while (obj != null && i < keys.length) {
                        obj = obj[keys[i++]];
                    }
                    td = (i && i === keys.length) ? obj : null;
                }
                return <td title={{ typeof td === 'string' || typeof td === 'number' ? 
                    td : undefined 
                }}>{{ td }}</td>
            }) }}
        </tr>
    }) }}
</tbody>

<div class="k-table-wrapper">
    <table class="k-table">
        {{ thead }}
        {{ tbody }}
    </table>
</div>

import {isStringOrNumberNotEmpty} from '../utils';

let {
    type, className, size, icon, circle, ref, key,
    tagName, htmlType, fluid, children, loading,
    value, _value, name, ...rest
} = self.get();

const classNameObj = {
    'k-btn': true,
    [`k-${type}`]: type !== 'default',
    'k-btn-icon': icon,
    [`k-${size}`]: size !== 'default',
    [className]: className, 
    'k-circle': circle,
    'k-loading': loading,
    'k-fluid': fluid,
    'k-active': value !== undefined && value === _value,
};

const Button = props => {
    if (props.href) {
        tagName = 'a';
    }
    if (tagName === 'button') {
        // set type of html button
        props.type = htmlType;
    }
    // disable button when loading
    if (loading) props.disabled = true;
    return h(tagName, props, props.children);
};

// hack for loading transition of width
if (!icon && Array.isArray(children)) {
    children.forEach((child, index) => {
        if (child) {
            if (child.type === 1 || isStringOrNumberNotEmpty(child)) {
                // is a text node
                // wrap text node with span
                children[index] = <span>{{ child }}</span>
            }
            // whether the icon is on the left side or right
            if (index === 0) {
                if (child.className && child.className.indexOf('icon') > -1) {
                    classNameObj['k-icon-left'] = true;
                }
            } else if (index === children.length - 1) {
                if (child.className && child.className.indexOf('icon') > -1) {
                    classNameObj['k-icon-right'] = true;
                }
            }
        }
    });
} else if (isStringOrNumberNotEmpty(children)) {
    // wrap text node with span
    children = <span>{{ children }}</span>
}

<Button class={{ classNameObj }} {{ ...rest }} 
    ev-click={{ self._onClick }}
>
    {{ loading ? 
        classNameObj['k-icon-right'] ?
            [children, <i class="k-icon ion-load-c icon-loading"></i>] :
            [<i class="k-icon ion-load-c icon-loading"></i>, children] :
        children 
    }}
    <input type="radio" v-if={{ value !== undefined }}
        name={{ name }} 
        checked={{ value === _value }}
    />
</Button>

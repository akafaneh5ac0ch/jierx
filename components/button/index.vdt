let {type, className, size, icon, circle, 
    fluid, children, loading, ...rest
} = self.get();

const classNameObj = {
    'k-btn': true,
    [`k-${type}`]: type !== 'default',
    'k-btn-icon': icon,
    [`k-${size}`]: size !== 'default',
    [className]: className, 
    'k-circle': circle,
    'k-loading': loading,
    'k-fluid': fluid,
};

const Button = props => {
    let tagName = props.tagName;
    if (!tagName && props.href) {
        tagName = 'a';
    }
    // disable button when loading
    if (loading) props.disabled = true;
    return h(tagName || 'button', props, props.children);
};

// hack for loading transition of width
if (!icon && Array.isArray(children)) {
    children.forEach((child, index) => {
        if (child) {
            if (child.type === 1) {
                // is a text node
                children[index] = <span>{{ child }}</span>
            }
            if (index === 0) {
                if (child.className && child.className.indexOf('icon') > -1) {
                    classNameObj['k-icon-left'] = true;
                }
            } else if (index === children.length - 1) {
                if (child.className && child.className.indexOf('icon') > -1) {
                    classNameObj['k-icon-right'] = true;
                }
            }
        }
    });
} else if (typeof children === 'string' || typeof children === 'number') {
    children = <span>{{ children }}</span>
}

<Button class={{ classNameObj }} {{ ...rest }}>{{ 
    loading ? 
        classNameObj['k-icon-right'] ?
            [children, <i class="k-icon icon-loading"></i>] :
            [<i class="k-icon icon-loading"></i>, children] :
        children 
}}</Button>

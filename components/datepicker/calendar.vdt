import Button from '../button';
import ScrollSelect from '../scrollSelect';
import Time from './time';
import {Row, Col} from '../grid';
import {range, strPad, _$} from '../utils';
import {isEqual, isLT, isGT, getDateString, getTimeString} from './utils';
import {Tabs, Tab} from '../tabs';

const {
    value, maxDate, minDate, dayClassNames,
    disabledDate, multiple, onMouseEnterDay,
    type, hours, minutes, seconds, 
    disabledHours, disabledMinutes, disabledSeconds,
    _isShowYearPicker, _isSelectTime, _now, _showDate, 
    _focusDate, _id,
} = self.get();

const values = multiple ? value || [] : [value];

const valueDate = new Date(values[self._index] || _now);
const showDate = new Date(_showDate || valueDate);

let yearMonthFormat = _$('yearMonthFormat');
if (yearMonthFormat === 'yearMonthFormat') {
    yearMonthFormat = 'YYYY MM';
}
const format = yearMonthFormat.split(' ');
const map = {
    'MM': <span class="k-text">{{ _$(`${showDate.getMonth() + 1}月`) }}</span>,
    'YYYY': <span class="k-text">{{ _$(`{n}年`, {n: showDate.getFullYear()}) }}</span>
};
const panel = type === 'year' ? map.YYYY : format.map(item => map[item]);

<div 
    class={{ {
        "k-calendar-wrapper": true,
        "k-datetime": type === 'datetime',
    } }}
    tabindex="0"
    ev-keydown={{ self._onKeydown }}
>
    <b:title />
    <Tabs type="border-card" v-if={{ type === 'datetime' }} 
        value={{ _isSelectTime ? "time" : "date" }}
        ev-$change:value={{ self._onChangeTab }}
    >
        <Tab value="date">{{ values[self._index] ? getDateString(valueDate) : '0000-00-00' }}</Tab>
        <Tab value="time">{{ values[self._index] ? getTimeString(valueDate) : '00:00:00' }}</Tab>
    </Tabs>
    <div v-if={{ !_isSelectTime }} class="k-date-picker">
        <div class="k-month c-clearfix">
            <div class="k-left-btns">
                <Button icon type="none" size="small" class="k-prev"
                    tagName="div" tabindex={{ null }} 
                    ev-click={{ self.prevYear }}
                >
                    <i class="k-icon ion-ios-arrow-left"></i>
                    <i class="k-icon ion-ios-arrow-left"></i>
                </Button>
                <Button icon type="none" size="small" class="k-prev"
                    tagName="div" tabindex={{ null }} 
                    ev-click={{ self.prevMonth }}
                    v-if={{ type !== 'year' }}
                >
                    <i class="k-icon ion-ios-arrow-left"></i>
                </Button>
            </div>
            <div class="k-right-btns">
                <Button icon type="none" size="small" class="k-next"
                    tagName="div" tabindex={{ null }} 
                    ev-click={{ self.nextYear }}
                >
                    <i class="k-icon ion-ios-arrow-right"></i>
                    <i class="k-icon ion-ios-arrow-right"></i>
                </Button>
                <Button icon type="none" size="small" class="k-next"
                    tagName="div" tabindex={{ null }} 
                    ev-click={{ self.nextMonth }}
                    v-if={{ type !== 'year' }}
                >
                    <i class="k-icon ion-ios-arrow-right"></i>
                </Button>
            </div>
            <div class="k-text-wrapper"
                ev-click={{ type === 'year' || type === 'month' ? undefined : self.showYearPicker }}
            >{{ panel }}</div>
        </div>
        <div class="k-weekdays" v-if={{ !_isShowYearPicker }}>
            <div class="k-weekday"
                v-for={{ [_$('日'), _$('一'), _$('二'), _$('三'), _$('四'), _$('五'), _$('六')] }}
            >{{ value }}</div>
        </div>
        <div class="k-calendar" v-if={{ !_isShowYearPicker }}
            ev-mouseleave={{ self._onMouseLeaveDays }}
        >
            {{ do {
                const ret = [];
                const start = new Date(showDate);
                const month = start.getMonth();
                start.setDate(1);
                start.setHours(0);
                start.setMinutes(0);
                start.setSeconds(0);
                const startWeekday = start.getDay(); 
                start.setDate(1 - startWeekday);

                const _maxDate = maxDate && new Date(maxDate);
                const _minDate = minDate && new Date(minDate);

                for (let i = 0; i < 42; i++) {
                    const _date = start.getDate();
                    const _month = start.getMonth();
                    const disabled = _maxDate && isGT(start, _maxDate) ||
                        _minDate && isLT(start, _minDate) ||
                        disabledDate.call(self, getDateString(start, type));
                    const isOut = _month !== month;
                    const classNames = dayClassNames ? 
                        dayClassNames.call(self, new Date(start), isOut) : 
                        null;
                    ret.push(
                        <div 
                            class={{ {
                                "k-day": true,
                                "k-out": isOut,
                                "k-active": !isOut && values.find(value => {
                                    return isEqual(new Date(value), start);
                                }),
                                "k-today": isEqual(_now, start),
                                "k-disabled": disabled, 
                                "k-hover": isEqual(start, _focusDate),
                                ...classNames
                            } }}
                            ev-click={{ !disabled && self.select.bind(self, new Date(start)) }}
                            ev-mouseenter={{ self._onMouseEnter.bind(self, new Date(start), isOut) }}
                        >{{ _date }}</div>
                    );
                    start.setDate(start.getDate() + 1);
                }
                const result = [];
                for (let i = 0; i < 6; i++) {
                    result.push(<div>{{ ret.slice(7 * i, 7 * (i + 1)) }}</div>)
                }
                result;
            } }}
        </div>
        <Row v-if={{ _isShowYearPicker }} class="k-year-picker">
            {{ do {
                const span = type === 'year' ? 24 : 12;
                const map = {
                    MM: (
                        <Col span={{ span }}>
                            <ScrollSelect 
                                data={{ range(0, 11).map(i => {
                                    return {label: _$(`${i + 1}月`), value: i};
                                }) }}
                                value={{ showDate.getMonth() }}
                                ev-$change:value={{ self.onChangeMonth }}
                            />
                        </Col>
                    ),
                    YYYY: (
                        <Col span={{ span }}>
                            <ScrollSelect 
                                data={{ (value) => {
                                    return range(value - 5, value + 5);
                                } }}
                                value={{ showDate.getFullYear() }}
                                ev-$change:value={{ self.onChangeYear }}
                            />
                        </Col>
                    )
                };

                if (type === 'year') {
                    map.YYYY;
                } else {
                    format.map(item => map[item]);
                }
            } }}
        </Row>
    </div>
    <div v-else class="k-time-picker" key="time">
        <b:time-head>
            <div class="k-month c-clearfix">
                <!--<Button type="none" size="small" class="k-prev"
                    ev-click={{ self.cancel.bind(self) }}
                >取消</Button>-->
                <span class="k-text-wrapper"
                    ev-click={{ self.cancel }}
                >{{ panel }}</span>
                <!--<Button type="none" size="small" class="k-next"
                    ev-click={{ self.confirm.bind(self) }}
                >确认</Button>-->
            </div>
        </b:time-head>
        <b:time-body>
            <Time
                data={{ [
                    hours.map(v => strPad(v, 2)),
                    minutes.map(v => strPad(v, 2)),
                    seconds.map(v => strPad(v, 2)),
                ] }}
                value={{ [
                    strPad(valueDate.getHours(), 2),
                    strPad(valueDate.getMinutes(), 2),
                    strPad(valueDate.getSeconds(), 2),
                ] }}
                ev-$change:value={{ self.onChangeTime }}
                min={{ self._getMinDate() }}
                max={{ self._getMaxDate() }}
                date={{ scope.date || getDateString(valueDate) }}
            >
                <b:append>:</b:append>
            </Time>
        </b:time-body>
    </div>
</div>

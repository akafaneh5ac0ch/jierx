import Input from '../input';
import Dropdown, {DropdownItem, DropdownMenu} from '../dropdown';
import {isStringOrNumber, getTextByChildren, addStyle, _$} from '../utils';
import Option from './option';
import OptionGroup from './group';

const {
    className, clearable, data, value, multiple,
    disabled, filterable, keywords, _show,
    placeholder, size, style, name, children,
    fluid, width, allowUnmatch,
} = self.get();

const _placeholder = placeholder == null ?
    (allowUnmatch && filterable) ? _$('请输入或选择') : _$('请选择') :
    placeholder;

const classNameObj = {
    'k-select': true,
    [className]: className,
    'k-disabled': disabled,
    'k-show': _show,
    'k-clearable': clearable,
    [`k-${size}`]: size !== 'default',
    'k-fluid': fluid,
};

let hasValue = value != null && (!multiple && value !== '' || multiple && value.length);
const isGroup = Array.isArray(self.get('data.0.data'));

// only show value as label when allowUnmatch is true, #40
let label = allowUnmatch && isStringOrNumber(value) ? value : null;
let labels = [];

const handleProps = props => {
    let active = false;
    let valid = false;

    if (!multiple) {
        if (props.value === value) {
            // set label
            label = props.label;
            active = true;
        } else {
            active = false;
        }
    } else if (Array.isArray(value)) {
        const index = value.indexOf(props.value);
        if (~index) {
            // keep order consistent
            labels[index] = props.label;
            active = true;
        } else {
            active = false;
        }
    }

    let tmp;
    if (
        !filterable && 
        props.label || 
        keywords == null || 
        ~props.label.toLowerCase().indexOf((tmp = keywords.toLowerCase())) || 
        (
            isStringOrNumber(props.value) && 
            ~String(props.value).toLowerCase().indexOf(tmp)
        )
    ) {
        valid = true; 
    }

    return {active, valid};
};

const Options = props => {
    const data = props.data;
    const ret = [];
    data.forEach((item, index) => {
        // deprecate text, use label instead of
        if (item.text) item.label = item.text;
        
        const {valid, active} = handleProps(item);
        if (valid) {
            ret.push(
                <DropdownItem 
                    ev-select={{ self._onSelect.bind(self, item.value) }}
                    disabled={{ item.disabled }}
                    class={{ {'k-active': active} }}
                    hideOnSelect={{ !multiple }}
                >{{ item.template ? item.template(item, index) : item.label }}</DropdownItem>
            );
        }
    });

    return ret;
}

const OptionsVNodes = ({children}) => {
    return __u.map(children ? (Array.isArray(children) ? children : [children]) : children, vNode => {
        if (vNode.tag === Option) {
            let props = vNode.props;
            props = {
                ...props, 
                'ev-select': self._onSelect.bind(self, props.value),
                hideOnSelect: !multiple,
                label: props.label || getTextByChildren(props.children),
                children: props.children || props.label 
            };
            const {active, valid} = handleProps(props);
            if (!valid) {
                return <!---->;
            } else {
                props.className = _className({
                    [props.className]: props.className,
                    'k-active': active,
                });
            }

            // if the multiple select option is active
            // add a √ icon
            if (active && multiple) {
                props.children = [
                    props.children,
                    <i class="k-checkmark ion-ios-checkmark-empty"></i>
                ];
            }

            // return the cloned vNode
            return h(Option, props);
        } else if (vNode.tag === OptionGroup) {
            let props = vNode.props;
            props = {
                ...props,
                children: <OptionsVNodes>{{ props.children }}</OptionsVNodes>
            };
            return h(OptionGroup, props);
        }

        return vNode;
    }); 
} 

const Menu = (
    <DropdownMenu ev-$changed:show={{ self._position }}
        ref="menu"
        class="k-select-dropdown"
        ev-$change:show={{ self._onChangeShow }}
    >
        <Options v-if={{ !isGroup }} data={{ data }} />
        <OptionGroup v-else v-for={{ data }} label={{ value.label }}>
            <Options data={{ value.data }} />
        </OptionGroup>
        <OptionsVNodes>{{ children }}</OptionsVNodes>
    </DropdownMenu>
);

// if the value is not in options, then set hasValue to false
if (hasValue && !label && !labels.length) {
    hasValue = false;
    // if this is a value, but the value does not exist in options
    // we set it to empty, #41
    self._clearValue();
}

<div class={{ {...classNameObj, 'k-active': hasValue} }}
    style={{ width != null ? addStyle(style, {width: `${width}px`}) : style }} 
    tabindex={{ disabled ? "-1" : "0" }}
    ev-keypress={{ self._onKeypress }}
    ev-keydown={{ self._onKeydown }}
>
    <Dropdown
        position={{ {my: 'left top+8', at: 'left bottom'} }} 
        trigger="click"
        disabled={{ disabled }}
        ref="dropdown"
    >
        <div class="k-wrapper" ev-click={{ self._focusInput }} tabindex="-1" ref="wrapper">
            <input type="hidden" value={{ value }} name={{ name }} />
            <Input v-if={{ !multiple && filterable }}
                value={{ keywords == null ? label : keywords }}
                ev-input={{ self._onSearch }}
                ev-blur={{ self._onBlur }}
                ev-focus={{ self._selectInput }}
                disabled={{ disabled }}
                placeholder={{ _placeholder }}
                ref="input"
                size={{ size }}
                fluid
            />
            <span class="k-placeholder c-ellipsis" v-else-if={{ !filterable && !hasValue }}>{{ _placeholder }}</span>
            <span class="k-value c-ellipsis" v-else-if={{ !multiple }}>{{ label }}</span>
            <Animate a:tag="span" a:disabled class="k-values" v-else>
                <Animate a:tag="span" class="k-tag" 
                    v-for={{ labels }} 
                    v-for-value="item"
                    v-for-key="index"
                    key={{ value[index] }}
                    a:transition="fade"
                >
                    <span class="k-text">{{ item }}</span>
                    <i class="k-icon ion-ios-close-empty"
                        ev-click={{ self._delete.bind(self, value[index]) }}
                    ></i>
                </Animate>
                <Input v-if={{ filterable }}
                    value={{ keywords }}
                    ev-input={{ self._onSearch }}
                    ev-blur={{ self._onBlur }}
                    ev-focus={{ self._onFocus }}
                    disabled={{ disabled }}
                    placeholder={{ !hasValue ? _placeholder : '' }}
                    ref="input"
                    autoWidth
                    size={{ size }}
                />
            </Animate>
            <span class="k-suffix">
                <i v-if={{ clearable }}
                    class={{ {"k-clear ion-ios-close": true, "k-show": hasValue} }}
                    ev-click={{ self._onClear }}
                ></i>
                <i class="k-arrow ion-arrow-down-b"></i>
            </span>
        </div>{{ 
        Menu 
    }}</Dropdown>
</div>

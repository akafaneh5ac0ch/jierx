import MoveWrapper from '../moveWrapper';
import Input from '../input';
import Dropdown, {DropdownItem, DropdownMenu} from '../dropdown';
import {isStringOrNumber} from '../utils';

const {
    className, clearable, data, value, multiple,
    disabled, filterable, keywords, _show,
    placeholder
} = self.get();

const classNameObj = {
    'k-select': true,
    [className]: className,
    'k-disabled': disabled,
    'k-show': _show,
    'k-clearable': clearable,
};

const hasValue = value != null && (!multiple && value !== '' || multiple && value.length);
const isGroup = Array.isArray(self.get('data.0.data'));

let label;
let labels = [];

const Options = props => {
    const data = props.data;
    let active = false;
    const ret = [];
    data.forEach((item, index) => {
        // deprecate text, use label instead of
        if (item.text) item.label = item.text;
        
        if (!multiple) {
            if (item.value === value) {
                // set label
                label = item.label;
                active = true;
            } else {
                active = false;
            }
        } else {
            const index = value.indexOf(item.value);
            if (~index) {
                // keep order consistent
                labels[index] = item.label;
                active = true;
            } else {
                active = false;
            }
        }

        if (
            !filterable || 
            keywords == null || 
            ~item.label.indexOf(keywords) || 
            (
                isStringOrNumber(item.value) && 
                ~String(item.value).indexOf(keywords)
            )
        ) {
            ret.push(
                <DropdownItem 
                    ev-select={{ self._onSelect.bind(self, item.value) }}
                    disabled={{ item.disabled }}
                    class={{ {'k-active': active} }}
                    hideOnSelect={{ !multiple }}
                >{{ item.template ? item.template(item, index) : item.label }}</DropdownItem>
            );
        }
    });

    return ret;
}

const Menu = (
    <DropdownMenu ev-$changed:show={{ self._position.bind(self) }}
        ref="menu"
        class="k-select-dropdown"
        ev-$change:show={{ self._onChangeShow.bind(self) }}
    >
        <Options v-if={{ !isGroup }} data={{ data }} />
        <div v-else class="k-group" v-for={{ data }}>
            <div class="k-label">{{ value.label }}</div>
            <Options data={{ value.data }} />
        </div>
    </DropdownMenu>
);


<div class={{ classNameObj }}>
    <Dropdown
        position={{ {my: 'left top', at: 'left bottom'} }} 
        trigger="click"
        disabled={{ disabled }}
    >
        <div class="k-wrapper" ev-click={{ self._focusInput.bind(self) }}>
            <input type="hidden" value={{ value }} />
            <Input v-if={{ !multiple && filterable }}
                value={{ keywords == null ? label : keywords }}
                ev-input={{ self._onSearch.bind(self) }}
                ev-blur={{ self._onBlur.bind(self) }}
                disabled={{ disabled }}
                placeholder={{ placeholder }}
                ref="input"
            />
            <span class="k-placeholder" v-else-if={{ !filterable && !hasValue }}>{{ placeholder }}</span>
            <span class="k-value" v-else-if={{ !multiple }}>{{ label }}</span>
            <Animate a:tag="span" a:disabled class="k-values" v-else>
                <Animate a:tag="span" class="k-tag" 
                    v-for={{ labels }} 
                    v-for-value="item"
                    v-for-key="index"
                    key={{ value[index] }}
                    a:transition="fade"
                >
                    <span class="k-text">{{ item }}</span>
                    <i class="k-icon ion-ios-close-empty"
                        ev-click={{ self._delete.bind(self, value[index]) }}
                    ></i>
                </Animate>
                <Input v-if={{ filterable }}
                    value={{ keywords }}
                    ev-input={{ self._onSearch.bind(self) }}
                    ev-blur={{ self._onBlur.bind(self) }}
                    ev-focus={{ self._onFocus.bind(self) }}
                    disabled={{ disabled }}
                    placeholder={{ !hasValue ? placeholder : '' }}
                    ref="input"
                    autoWidth
                />
            </Animate>
            <span class="k-suffix">
                <i v-if={{ clearable }}
                    class={{ {"k-clear ion-ios-close": true, "k-show": hasValue} }}
                    ev-click={{ self._onClear.bind(self) }}
                ></i>
                <i class="k-arrow ion-arrow-down-b"></i>
            </span>
        </div>{{ 
        Menu 
    }}</Dropdown>
</div>
